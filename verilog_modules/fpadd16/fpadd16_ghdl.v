/* Generated by Yosys 0.42+12 (git sha1 a55e8594b, clang++ 14.0.0-1ubuntu1.1 -fPIC -Os) */

(* top =  1  *)
(* src = "fpadd16_wrapper.v:3.1-19.10" *)
module fpadd16_wrapper(clk, X, Y, R);
  (* src = "fpadd16_wrapper.v:7.24-7.25" *)
  output [17:0] R;
  wire [17:0] R;
  (* src = "fpadd16_wrapper.v:5.24-5.25" *)
  input [17:0] X;
  wire [17:0] X;
  (* src = "fpadd16_wrapper.v:6.24-6.25" *)
  input [17:0] Y;
  wire [17:0] Y;
  (* src = "fpadd16_wrapper.v:4.24-4.27" *)
  input clk;
  wire clk;
  (* blackbox = 32'd1 *)
  (* module_not_derived = 32'd1 *)
  (* src = "fpadd16_wrapper.v:12.14-17.4" *)
  top_module dut (
    .R(R),
    .X(X),
    .Y(Y),
    .clk(clk)
  );
endmodule

module intadder_14_freq500_uid6(clk, x, y, cin, r);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  input cin;
  wire cin;
  wire cin_0;
  reg cin_0_d1;
  input clk;
  wire clk;
  output [13:0] r;
  wire [13:0] r;
  wire [10:0] r_0;
  wire [2:0] r_1;
  (* unused_bits = "11" *)
  wire [11:0] s_0;
  wire [3:0] s_1;
  input [13:0] x;
  wire [13:0] x;
  wire [10:0] x_0;
  reg [10:0] x_0_d1;
  reg [10:0] x_0_d2;
  reg [10:0] x_0_d3;
  reg [10:0] x_0_d4;
  wire [2:0] x_1;
  reg [2:0] x_1_d1;
  reg [2:0] x_1_d2;
  reg [2:0] x_1_d3;
  reg [2:0] x_1_d4;
  input [13:0] y;
  wire [13:0] y;
  wire [10:0] y_0;
  reg [10:0] y_0_d1;
  reg [10:0] y_0_d2;
  wire [2:0] y_1;
  reg [2:0] y_1_d1;
  reg [2:0] y_1_d2;
  assign _021_ = ~(y_0_d2[0] ^ x_0_d4[0]);
  assign r[0] = ~(_021_ ^ cin_0_d1);
  assign _022_ = y_0_d2[1] ^ x_0_d4[1];
  assign _023_ = ~(y_0_d2[0] & x_0_d4[0]);
  assign _024_ = cin_0_d1 & ~(_021_);
  assign _025_ = _023_ & ~(_024_);
  assign r[1] = ~(_025_ ^ _022_);
  assign _026_ = ~(y_0_d2[2] ^ x_0_d4[2]);
  assign _027_ = y_0_d2[1] & x_0_d4[1];
  assign _028_ = _022_ & ~(_025_);
  assign _029_ = _028_ | _027_;
  assign r[2] = ~(_029_ ^ _026_);
  assign _030_ = ~(y_0_d2[3] ^ x_0_d4[3]);
  assign _031_ = ~(y_0_d2[2] & x_0_d4[2]);
  assign _032_ = _029_ & ~(_026_);
  assign _033_ = _031_ & ~(_032_);
  assign r[3] = _033_ ^ _030_;
  assign _034_ = ~(y_0_d2[4] ^ x_0_d4[4]);
  assign _035_ = y_0_d2[3] & x_0_d4[3];
  assign _036_ = ~(_031_ | _030_);
  assign _037_ = _036_ | _035_;
  assign _038_ = _030_ | _026_;
  assign _039_ = _029_ & ~(_038_);
  assign _040_ = _039_ | _037_;
  assign r[4] = ~(_040_ ^ _034_);
  assign _041_ = ~(y_0_d2[5] ^ x_0_d4[5]);
  assign _042_ = ~(y_0_d2[4] & x_0_d4[4]);
  assign _043_ = _040_ & ~(_034_);
  assign _044_ = _042_ & ~(_043_);
  assign r[5] = _044_ ^ _041_;
  assign _045_ = ~(y_0_d2[6] ^ x_0_d4[6]);
  assign _046_ = y_0_d2[5] & x_0_d4[5];
  assign _047_ = ~(_042_ | _041_);
  assign _048_ = _047_ | _046_;
  assign _049_ = _041_ | _034_;
  assign _050_ = _049_ | ~(_040_);
  assign _051_ = _050_ & ~(_048_);
  assign r[6] = _051_ ^ _045_;
  assign _052_ = ~(y_0_d2[7] ^ x_0_d4[7]);
  assign _053_ = ~(y_0_d2[6] & x_0_d4[6]);
  assign _054_ = ~(_051_ | _045_);
  assign _055_ = _053_ & ~(_054_);
  assign r[7] = _055_ ^ _052_;
  assign _056_ = ~(y_0_d2[8] ^ x_0_d4[8]);
  assign _057_ = ~(y_0_d2[7] & x_0_d4[7]);
  assign _058_ = ~(_053_ | _052_);
  assign _059_ = _057_ & ~(_058_);
  assign _060_ = _052_ | _045_;
  assign _061_ = _048_ & ~(_060_);
  assign _062_ = _059_ & ~(_061_);
  assign _063_ = _060_ | _049_;
  assign _064_ = _040_ & ~(_063_);
  assign _065_ = _062_ & ~(_064_);
  assign r[8] = _065_ ^ _056_;
  assign _066_ = ~(y_0_d2[9] ^ x_0_d4[9]);
  assign _067_ = ~(y_0_d2[8] & x_0_d4[8]);
  assign _000_ = ~(_065_ | _056_);
  assign _001_ = _067_ & ~(_000_);
  assign r[9] = _001_ ^ _066_;
  assign _002_ = ~(y_0_d2[10] ^ x_0_d4[10]);
  assign _003_ = ~(y_0_d2[9] & x_0_d4[9]);
  assign _004_ = ~(_067_ | _066_);
  assign _005_ = _003_ & ~(_004_);
  assign _006_ = _066_ | _056_;
  assign _007_ = ~(_006_ | _065_);
  assign _008_ = _005_ & ~(_007_);
  assign r[10] = _008_ ^ _002_;
  assign _009_ = ~(y_1_d2[0] ^ x_1_d4[0]);
  assign _010_ = ~(y_0_d2[10] & x_0_d4[10]);
  assign _011_ = ~(_008_ | _002_);
  assign _012_ = _010_ & ~(_011_);
  assign r[11] = _012_ ^ _009_;
  assign _013_ = ~(y_1_d2[1] ^ x_1_d4[1]);
  assign _014_ = ~(y_1_d2[0] & x_1_d4[0]);
  assign _015_ = ~(_012_ | _009_);
  assign _016_ = _014_ & ~(_015_);
  assign r[12] = _016_ ^ _013_;
  assign _017_ = ~(y_1_d2[2] ^ x_1_d4[2]);
  assign _018_ = ~(y_1_d2[1] & x_1_d4[1]);
  assign _019_ = ~(_016_ | _013_);
  assign _020_ = _018_ & ~(_019_);
  assign r[13] = _020_ ^ _017_;
  always @(posedge clk)
    x_0_d2[0] <= x_0_d1[0];
  always @(posedge clk)
    x_0_d2[1] <= x_0_d1[1];
  always @(posedge clk)
    x_0_d2[2] <= x_0_d1[2];
  always @(posedge clk)
    x_0_d2[3] <= x_0_d1[3];
  always @(posedge clk)
    x_0_d2[4] <= x_0_d1[4];
  always @(posedge clk)
    x_0_d2[5] <= x_0_d1[5];
  always @(posedge clk)
    x_0_d2[6] <= x_0_d1[6];
  always @(posedge clk)
    x_0_d2[7] <= x_0_d1[7];
  always @(posedge clk)
    x_0_d2[8] <= x_0_d1[8];
  always @(posedge clk)
    x_0_d2[9] <= x_0_d1[9];
  always @(posedge clk)
    x_0_d2[10] <= x_0_d1[10];
  always @(posedge clk)
    x_0_d1[0] <= x[0];
  always @(posedge clk)
    x_0_d1[1] <= x[1];
  always @(posedge clk)
    x_0_d1[2] <= x[2];
  always @(posedge clk)
    x_0_d1[3] <= x[3];
  always @(posedge clk)
    x_0_d1[4] <= x[4];
  always @(posedge clk)
    x_0_d1[5] <= x[5];
  always @(posedge clk)
    x_0_d1[6] <= x[6];
  always @(posedge clk)
    x_0_d1[7] <= x[7];
  always @(posedge clk)
    x_0_d1[8] <= x[8];
  always @(posedge clk)
    x_0_d1[9] <= x[9];
  always @(posedge clk)
    x_0_d1[10] <= x[10];
  always @(posedge clk)
    cin_0_d1 <= cin;
  always @(posedge clk)
    y_0_d1[0] <= y[0];
  always @(posedge clk)
    y_0_d1[1] <= y[1];
  always @(posedge clk)
    y_0_d1[2] <= y[2];
  always @(posedge clk)
    y_0_d1[3] <= y[3];
  always @(posedge clk)
    y_0_d1[4] <= y[4];
  always @(posedge clk)
    y_0_d1[5] <= y[5];
  always @(posedge clk)
    y_0_d1[6] <= y[6];
  always @(posedge clk)
    y_0_d1[7] <= y[7];
  always @(posedge clk)
    y_0_d1[8] <= y[8];
  always @(posedge clk)
    y_0_d1[9] <= y[9];
  always @(posedge clk)
    y_0_d1[10] <= y[10];
  always @(posedge clk)
    y_0_d2[0] <= y_0_d1[0];
  always @(posedge clk)
    y_0_d2[1] <= y_0_d1[1];
  always @(posedge clk)
    y_0_d2[2] <= y_0_d1[2];
  always @(posedge clk)
    y_0_d2[3] <= y_0_d1[3];
  always @(posedge clk)
    y_0_d2[4] <= y_0_d1[4];
  always @(posedge clk)
    y_0_d2[5] <= y_0_d1[5];
  always @(posedge clk)
    y_0_d2[6] <= y_0_d1[6];
  always @(posedge clk)
    y_0_d2[7] <= y_0_d1[7];
  always @(posedge clk)
    y_0_d2[8] <= y_0_d1[8];
  always @(posedge clk)
    y_0_d2[9] <= y_0_d1[9];
  always @(posedge clk)
    y_0_d2[10] <= y_0_d1[10];
  always @(posedge clk)
    x_1_d3[0] <= x_1_d2[0];
  always @(posedge clk)
    x_1_d3[1] <= x_1_d2[1];
  always @(posedge clk)
    x_1_d3[2] <= x_1_d2[2];
  always @(posedge clk)
    x_1_d4[0] <= x_1_d3[0];
  always @(posedge clk)
    x_1_d4[1] <= x_1_d3[1];
  always @(posedge clk)
    x_1_d4[2] <= x_1_d3[2];
  always @(posedge clk)
    x_1_d1[0] <= x[11];
  always @(posedge clk)
    x_1_d1[1] <= x[12];
  always @(posedge clk)
    x_1_d1[2] <= x[13];
  always @(posedge clk)
    x_1_d2[0] <= x_1_d1[0];
  always @(posedge clk)
    x_1_d2[1] <= x_1_d1[1];
  always @(posedge clk)
    x_1_d2[2] <= x_1_d1[2];
  always @(posedge clk)
    y_1_d1[0] <= y[11];
  always @(posedge clk)
    y_1_d1[1] <= y[12];
  always @(posedge clk)
    y_1_d1[2] <= y[13];
  always @(posedge clk)
    y_1_d2[0] <= y_1_d1[0];
  always @(posedge clk)
    y_1_d2[1] <= y_1_d1[1];
  always @(posedge clk)
    y_1_d2[2] <= y_1_d1[2];
  always @(posedge clk)
    x_0_d3[0] <= x_0_d2[0];
  always @(posedge clk)
    x_0_d3[1] <= x_0_d2[1];
  always @(posedge clk)
    x_0_d3[2] <= x_0_d2[2];
  always @(posedge clk)
    x_0_d3[3] <= x_0_d2[3];
  always @(posedge clk)
    x_0_d3[4] <= x_0_d2[4];
  always @(posedge clk)
    x_0_d3[5] <= x_0_d2[5];
  always @(posedge clk)
    x_0_d3[6] <= x_0_d2[6];
  always @(posedge clk)
    x_0_d3[7] <= x_0_d2[7];
  always @(posedge clk)
    x_0_d3[8] <= x_0_d2[8];
  always @(posedge clk)
    x_0_d3[9] <= x_0_d2[9];
  always @(posedge clk)
    x_0_d3[10] <= x_0_d2[10];
  always @(posedge clk)
    x_0_d4[0] <= x_0_d3[0];
  always @(posedge clk)
    x_0_d4[1] <= x_0_d3[1];
  always @(posedge clk)
    x_0_d4[2] <= x_0_d3[2];
  always @(posedge clk)
    x_0_d4[3] <= x_0_d3[3];
  always @(posedge clk)
    x_0_d4[4] <= x_0_d3[4];
  always @(posedge clk)
    x_0_d4[5] <= x_0_d3[5];
  always @(posedge clk)
    x_0_d4[6] <= x_0_d3[6];
  always @(posedge clk)
    x_0_d4[7] <= x_0_d3[7];
  always @(posedge clk)
    x_0_d4[8] <= x_0_d3[8];
  always @(posedge clk)
    x_0_d4[9] <= x_0_d3[9];
  always @(posedge clk)
    x_0_d4[10] <= x_0_d3[10];
  assign cin_0 = cin;
  assign r_0 = r[10:0];
  assign r_1 = r[13:11];
  assign s_0[10:0] = r[10:0];
  assign s_1 = { 1'hx, r[13:11] };
  assign x_0 = x[10:0];
  assign x_1 = x[13:11];
  assign y_0 = y[10:0];
  assign y_1 = y[13:11];
endmodule

module intadder_18_freq500_uid11(clk, x, y, cin, r);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  input cin;
  wire cin;
  wire cin_0;
  reg cin_0_d1;
  input clk;
  wire clk;
  output [17:0] r;
  wire [17:0] r;
  wire [16:0] r_0;
  wire r_1;
  (* unused_bits = "17" *)
  wire [17:0] s_0;
  wire [1:0] s_1;
  input [17:0] x;
  wire [17:0] x;
  wire [16:0] x_0;
  reg [16:0] x_0_d1;
  wire x_1;
  reg x_1_d1;
  input [17:0] y;
  wire [17:0] y;
  wire [12:0] y_0;
  reg [16:0] y_0_d1;
  reg [16:0] y_0_d2;
  reg [16:0] y_0_d3;
  reg [16:0] y_0_d4;
  reg [16:0] y_0_d5;
  reg [16:0] y_0_d6;
  reg [16:0] y_0_d7;
  reg [16:0] y_0_d8;
  wire [1:0] y_1;
  wire [1:0] y_1_d1;
  wire [1:0] y_1_d2;
  reg y_1_d3;
  reg y_1_d4;
  reg y_1_d5;
  reg y_1_d6;
  reg y_1_d7;
  reg y_1_d8;
  assign _066_ = ~(x_0_d1[0] ^ y_0_d8[0]);
  assign r[0] = ~(_066_ ^ cin_0_d1);
  assign _067_ = x_0_d1[1] ^ y_0_d8[1];
  assign _068_ = ~(x_0_d1[0] & y_0_d8[0]);
  assign _069_ = cin_0_d1 & ~(_066_);
  assign _070_ = _068_ & ~(_069_);
  assign r[1] = ~(_070_ ^ _067_);
  assign _071_ = ~(x_0_d1[2] ^ y_0_d8[2]);
  assign _072_ = x_0_d1[1] & y_0_d8[1];
  assign _073_ = _067_ & ~(_070_);
  assign _074_ = _073_ | _072_;
  assign r[2] = ~(_074_ ^ _071_);
  assign _075_ = ~(x_0_d1[3] ^ y_0_d8[3]);
  assign _076_ = ~(x_0_d1[2] & y_0_d8[2]);
  assign _077_ = _074_ & ~(_071_);
  assign _078_ = _076_ & ~(_077_);
  assign r[3] = _078_ ^ _075_;
  assign _079_ = ~(x_0_d1[4] ^ y_0_d8[4]);
  assign _080_ = x_0_d1[3] & y_0_d8[3];
  assign _081_ = ~(_076_ | _075_);
  assign _082_ = _081_ | _080_;
  assign _083_ = _075_ | _071_;
  assign _084_ = _074_ & ~(_083_);
  assign _085_ = _084_ | _082_;
  assign r[4] = ~(_085_ ^ _079_);
  assign _086_ = ~(x_0_d1[5] ^ y_0_d8[5]);
  assign _087_ = ~(x_0_d1[4] & y_0_d8[4]);
  assign _088_ = _085_ & ~(_079_);
  assign _089_ = _087_ & ~(_088_);
  assign r[5] = _089_ ^ _086_;
  assign _090_ = ~(x_0_d1[6] ^ y_0_d8[6]);
  assign _091_ = x_0_d1[5] & y_0_d8[5];
  assign _092_ = ~(_087_ | _086_);
  assign _093_ = _092_ | _091_;
  assign _094_ = _086_ | _079_;
  assign _095_ = _094_ | ~(_085_);
  assign _096_ = _095_ & ~(_093_);
  assign r[6] = _096_ ^ _090_;
  assign _097_ = ~(x_0_d1[7] ^ y_0_d8[7]);
  assign _098_ = ~(x_0_d1[6] & y_0_d8[6]);
  assign _099_ = ~(_096_ | _090_);
  assign _100_ = _098_ & ~(_099_);
  assign r[7] = _100_ ^ _097_;
  assign _101_ = ~(x_0_d1[8] ^ y_0_d8[8]);
  assign _000_ = x_0_d1[7] & y_0_d8[7];
  assign _001_ = ~(_098_ | _097_);
  assign _002_ = _001_ | _000_;
  assign _003_ = _097_ | _090_;
  assign _004_ = _093_ & ~(_003_);
  assign _005_ = _004_ | _002_;
  assign _006_ = _003_ | _094_;
  assign _007_ = _085_ & ~(_006_);
  assign _008_ = _007_ | _005_;
  assign r[8] = ~(_008_ ^ _101_);
  assign _009_ = x_0_d1[9] ^ y_0_d8[9];
  assign _010_ = ~(x_0_d1[8] & y_0_d8[8]);
  assign _011_ = _008_ & ~(_101_);
  assign _012_ = _011_ | ~(_010_);
  assign r[9] = _012_ ^ _009_;
  assign _013_ = ~(x_0_d1[10] ^ y_0_d8[10]);
  assign _014_ = x_0_d1[9] & y_0_d8[9];
  assign _015_ = _009_ & ~(_010_);
  assign _016_ = _015_ | _014_;
  assign _017_ = _101_ | ~(_009_);
  assign _018_ = _017_ | ~(_008_);
  assign _019_ = _018_ & ~(_016_);
  assign r[10] = _019_ ^ _013_;
  assign _020_ = ~(x_0_d1[11] ^ y_0_d8[11]);
  assign _021_ = ~(x_0_d1[10] & y_0_d8[10]);
  assign _022_ = ~(_019_ | _013_);
  assign _023_ = _021_ & ~(_022_);
  assign r[11] = _023_ ^ _020_;
  assign _024_ = ~(x_0_d1[12] ^ y_0_d8[12]);
  assign _025_ = x_0_d1[11] & y_0_d8[11];
  assign _026_ = ~(_021_ | _020_);
  assign _027_ = _026_ | _025_;
  assign _028_ = _020_ | _013_;
  assign _029_ = _016_ & ~(_028_);
  assign _030_ = _029_ | _027_;
  assign _031_ = _028_ | _017_;
  assign _032_ = _008_ & ~(_031_);
  assign _033_ = ~(_032_ | _030_);
  assign r[12] = _033_ ^ _024_;
  assign _034_ = ~(x_0_d1[13] ^ y_0_d8[13]);
  assign _035_ = ~(x_0_d1[12] & y_0_d8[12]);
  assign _036_ = ~(_033_ | _024_);
  assign _037_ = _035_ & ~(_036_);
  assign r[13] = _037_ ^ _034_;
  assign _038_ = ~(x_0_d1[14] ^ y_0_d8[14]);
  assign _039_ = x_0_d1[13] & y_0_d8[13];
  assign _040_ = ~(_035_ | _034_);
  assign _041_ = ~(_040_ | _039_);
  assign _042_ = _034_ | _024_;
  assign _043_ = ~(_042_ | _033_);
  assign _044_ = _041_ & ~(_043_);
  assign r[14] = _044_ ^ _038_;
  assign _045_ = ~(x_0_d1[15] ^ y_0_d8[15]);
  assign _046_ = ~(x_0_d1[14] & y_0_d8[14]);
  assign _047_ = ~(_044_ | _038_);
  assign _048_ = _046_ & ~(_047_);
  assign r[15] = _048_ ^ _045_;
  assign _049_ = ~(x_0_d1[16] ^ y_0_d8[16]);
  assign _050_ = ~(x_0_d1[15] & y_0_d8[15]);
  assign _051_ = ~(_046_ | _045_);
  assign _052_ = _050_ & ~(_051_);
  assign _053_ = _045_ | _038_;
  assign _054_ = ~(_053_ | _041_);
  assign _055_ = _052_ & ~(_054_);
  assign _056_ = _053_ | _042_;
  assign _057_ = _030_ & ~(_056_);
  assign _058_ = _055_ & ~(_057_);
  assign _059_ = _056_ | _031_;
  assign _060_ = _008_ & ~(_059_);
  assign _061_ = _058_ & ~(_060_);
  assign r[16] = _061_ ^ _049_;
  assign _062_ = ~(x_0_d1[16] & y_0_d8[16]);
  assign _063_ = ~(_061_ | _049_);
  assign _064_ = _062_ & ~(_063_);
  assign _065_ = ~(_064_ ^ x_1_d1);
  assign r_1 = _065_ ^ y_1_d8;
  always @(posedge clk)
    y_0_d3[0] <= y_0_d2[0];
  always @(posedge clk)
    y_0_d3[1] <= y_0_d2[1];
  always @(posedge clk)
    y_0_d3[2] <= y_0_d2[2];
  always @(posedge clk)
    y_0_d3[3] <= y_0_d2[3];
  always @(posedge clk)
    y_0_d3[4] <= y_0_d2[4];
  always @(posedge clk)
    y_0_d3[5] <= y_0_d2[5];
  always @(posedge clk)
    y_0_d3[6] <= y_0_d2[6];
  always @(posedge clk)
    y_0_d3[7] <= y_0_d2[7];
  always @(posedge clk)
    y_0_d3[8] <= y_0_d2[8];
  always @(posedge clk)
    y_0_d3[9] <= y_0_d2[9];
  always @(posedge clk)
    y_0_d3[10] <= y_0_d2[10];
  always @(posedge clk)
    y_0_d3[11] <= y_0_d2[11];
  always @(posedge clk)
    y_0_d3[12] <= y_0_d2[12];
  always @(posedge clk)
    y_0_d3[13] <= y_0_d2[13];
  always @(posedge clk)
    y_0_d3[14] <= y_0_d2[14];
  always @(posedge clk)
    y_0_d3[15] <= y_0_d2[15];
  always @(posedge clk)
    y_0_d3[16] <= y_0_d2[16];
  always @(posedge clk)
    y_0_d4[0] <= y_0_d3[0];
  always @(posedge clk)
    y_0_d4[1] <= y_0_d3[1];
  always @(posedge clk)
    y_0_d4[2] <= y_0_d3[2];
  always @(posedge clk)
    y_0_d4[3] <= y_0_d3[3];
  always @(posedge clk)
    y_0_d4[4] <= y_0_d3[4];
  always @(posedge clk)
    y_0_d4[5] <= y_0_d3[5];
  always @(posedge clk)
    y_0_d4[6] <= y_0_d3[6];
  always @(posedge clk)
    y_0_d4[7] <= y_0_d3[7];
  always @(posedge clk)
    y_0_d4[8] <= y_0_d3[8];
  always @(posedge clk)
    y_0_d4[9] <= y_0_d3[9];
  always @(posedge clk)
    y_0_d4[10] <= y_0_d3[10];
  always @(posedge clk)
    y_0_d4[11] <= y_0_d3[11];
  always @(posedge clk)
    y_0_d4[12] <= y_0_d3[12];
  always @(posedge clk)
    y_0_d4[13] <= y_0_d3[13];
  always @(posedge clk)
    y_0_d4[14] <= y_0_d3[14];
  always @(posedge clk)
    y_0_d4[15] <= y_0_d3[15];
  always @(posedge clk)
    y_0_d4[16] <= y_0_d3[16];
  always @(posedge clk)
    x_0_d1[0] <= x[0];
  always @(posedge clk)
    x_0_d1[1] <= x[1];
  always @(posedge clk)
    x_0_d1[2] <= x[2];
  always @(posedge clk)
    x_0_d1[3] <= x[3];
  always @(posedge clk)
    x_0_d1[4] <= x[4];
  always @(posedge clk)
    x_0_d1[5] <= x[5];
  always @(posedge clk)
    x_0_d1[6] <= x[6];
  always @(posedge clk)
    x_0_d1[7] <= x[7];
  always @(posedge clk)
    x_0_d1[8] <= x[8];
  always @(posedge clk)
    x_0_d1[9] <= x[9];
  always @(posedge clk)
    x_0_d1[10] <= x[10];
  always @(posedge clk)
    x_0_d1[11] <= x[11];
  always @(posedge clk)
    x_0_d1[12] <= x[12];
  always @(posedge clk)
    x_0_d1[13] <= x[13];
  always @(posedge clk)
    x_0_d1[14] <= x[14];
  always @(posedge clk)
    x_0_d1[15] <= x[15];
  always @(posedge clk)
    x_0_d1[16] <= x[16];
  always @(posedge clk)
    y_0_d2[0] <= y_0_d1[0];
  always @(posedge clk)
    y_0_d2[1] <= y_0_d1[1];
  always @(posedge clk)
    y_0_d2[2] <= y_0_d1[2];
  always @(posedge clk)
    y_0_d2[3] <= y_0_d1[3];
  always @(posedge clk)
    y_0_d2[4] <= y_0_d1[4];
  always @(posedge clk)
    y_0_d2[5] <= y_0_d1[5];
  always @(posedge clk)
    y_0_d2[6] <= y_0_d1[6];
  always @(posedge clk)
    y_0_d2[7] <= y_0_d1[7];
  always @(posedge clk)
    y_0_d2[8] <= y_0_d1[8];
  always @(posedge clk)
    y_0_d2[9] <= y_0_d1[9];
  always @(posedge clk)
    y_0_d2[10] <= y_0_d1[10];
  always @(posedge clk)
    y_0_d2[11] <= y_0_d1[11];
  always @(posedge clk)
    y_0_d2[12] <= y_0_d1[12];
  always @(posedge clk)
    y_0_d2[13] <= y_0_d1[13];
  always @(posedge clk)
    y_0_d2[14] <= y_0_d1[14];
  always @(posedge clk)
    y_0_d2[15] <= y_0_d1[15];
  always @(posedge clk)
    y_0_d2[16] <= y_0_d1[16];
  always @(posedge clk)
    cin_0_d1 <= cin;
  always @(posedge clk)
    y_0_d1[0] <= y[0];
  always @(posedge clk)
    y_0_d1[1] <= y[1];
  always @(posedge clk)
    y_0_d1[2] <= y[2];
  always @(posedge clk)
    y_0_d1[3] <= y[3];
  always @(posedge clk)
    y_0_d1[4] <= y[4];
  always @(posedge clk)
    y_0_d1[5] <= y[5];
  always @(posedge clk)
    y_0_d1[6] <= y[6];
  always @(posedge clk)
    y_0_d1[7] <= y[7];
  always @(posedge clk)
    y_0_d1[8] <= y[8];
  always @(posedge clk)
    y_0_d1[9] <= y[9];
  always @(posedge clk)
    y_0_d1[10] <= y[10];
  always @(posedge clk)
    y_0_d1[11] <= y[11];
  always @(posedge clk)
    y_0_d1[12] <= y[12];
  always @(posedge clk)
    y_0_d1[13] <= y[13];
  always @(posedge clk)
    y_0_d1[14] <= y[14];
  always @(posedge clk)
    y_0_d1[15] <= y[15];
  always @(posedge clk)
    y_0_d1[16] <= y[16];
  always @(posedge clk)
    x_1_d1 <= x[17];
  reg \y_1_d2_reg[0] ;
  always @(posedge clk)
    \y_1_d2_reg[0]  <= y_1_d1[0];
  assign y_1_d2[0] = \y_1_d2_reg[0] ;
  always @(posedge clk)
    y_1_d3 <= y_1_d2[0];
  always @(posedge clk)
    y_1_d4 <= y_1_d3;
  always @(posedge clk)
    y_1_d5 <= y_1_d4;
  always @(posedge clk)
    y_1_d6 <= y_1_d5;
  always @(posedge clk)
    y_1_d7 <= y_1_d6;
  always @(posedge clk)
    y_1_d8 <= y_1_d7;
  reg \y_1_d1_reg[0] ;
  always @(posedge clk)
    \y_1_d1_reg[0]  <= y[17];
  assign y_1_d1[0] = \y_1_d1_reg[0] ;
  always @(posedge clk)
    y_0_d5[0] <= y_0_d4[0];
  always @(posedge clk)
    y_0_d5[1] <= y_0_d4[1];
  always @(posedge clk)
    y_0_d5[2] <= y_0_d4[2];
  always @(posedge clk)
    y_0_d5[3] <= y_0_d4[3];
  always @(posedge clk)
    y_0_d5[4] <= y_0_d4[4];
  always @(posedge clk)
    y_0_d5[5] <= y_0_d4[5];
  always @(posedge clk)
    y_0_d5[6] <= y_0_d4[6];
  always @(posedge clk)
    y_0_d5[7] <= y_0_d4[7];
  always @(posedge clk)
    y_0_d5[8] <= y_0_d4[8];
  always @(posedge clk)
    y_0_d5[9] <= y_0_d4[9];
  always @(posedge clk)
    y_0_d5[10] <= y_0_d4[10];
  always @(posedge clk)
    y_0_d5[11] <= y_0_d4[11];
  always @(posedge clk)
    y_0_d5[12] <= y_0_d4[12];
  always @(posedge clk)
    y_0_d5[13] <= y_0_d4[13];
  always @(posedge clk)
    y_0_d5[14] <= y_0_d4[14];
  always @(posedge clk)
    y_0_d5[15] <= y_0_d4[15];
  always @(posedge clk)
    y_0_d5[16] <= y_0_d4[16];
  always @(posedge clk)
    y_0_d6[0] <= y_0_d5[0];
  always @(posedge clk)
    y_0_d6[1] <= y_0_d5[1];
  always @(posedge clk)
    y_0_d6[2] <= y_0_d5[2];
  always @(posedge clk)
    y_0_d6[3] <= y_0_d5[3];
  always @(posedge clk)
    y_0_d6[4] <= y_0_d5[4];
  always @(posedge clk)
    y_0_d6[5] <= y_0_d5[5];
  always @(posedge clk)
    y_0_d6[6] <= y_0_d5[6];
  always @(posedge clk)
    y_0_d6[7] <= y_0_d5[7];
  always @(posedge clk)
    y_0_d6[8] <= y_0_d5[8];
  always @(posedge clk)
    y_0_d6[9] <= y_0_d5[9];
  always @(posedge clk)
    y_0_d6[10] <= y_0_d5[10];
  always @(posedge clk)
    y_0_d6[11] <= y_0_d5[11];
  always @(posedge clk)
    y_0_d6[12] <= y_0_d5[12];
  always @(posedge clk)
    y_0_d6[13] <= y_0_d5[13];
  always @(posedge clk)
    y_0_d6[14] <= y_0_d5[14];
  always @(posedge clk)
    y_0_d6[15] <= y_0_d5[15];
  always @(posedge clk)
    y_0_d6[16] <= y_0_d5[16];
  always @(posedge clk)
    y_0_d7[0] <= y_0_d6[0];
  always @(posedge clk)
    y_0_d7[1] <= y_0_d6[1];
  always @(posedge clk)
    y_0_d7[2] <= y_0_d6[2];
  always @(posedge clk)
    y_0_d7[3] <= y_0_d6[3];
  always @(posedge clk)
    y_0_d7[4] <= y_0_d6[4];
  always @(posedge clk)
    y_0_d7[5] <= y_0_d6[5];
  always @(posedge clk)
    y_0_d7[6] <= y_0_d6[6];
  always @(posedge clk)
    y_0_d7[7] <= y_0_d6[7];
  always @(posedge clk)
    y_0_d7[8] <= y_0_d6[8];
  always @(posedge clk)
    y_0_d7[9] <= y_0_d6[9];
  always @(posedge clk)
    y_0_d7[10] <= y_0_d6[10];
  always @(posedge clk)
    y_0_d7[11] <= y_0_d6[11];
  always @(posedge clk)
    y_0_d7[12] <= y_0_d6[12];
  always @(posedge clk)
    y_0_d7[13] <= y_0_d6[13];
  always @(posedge clk)
    y_0_d7[14] <= y_0_d6[14];
  always @(posedge clk)
    y_0_d7[15] <= y_0_d6[15];
  always @(posedge clk)
    y_0_d7[16] <= y_0_d6[16];
  always @(posedge clk)
    y_0_d8[0] <= y_0_d7[0];
  always @(posedge clk)
    y_0_d8[1] <= y_0_d7[1];
  always @(posedge clk)
    y_0_d8[2] <= y_0_d7[2];
  always @(posedge clk)
    y_0_d8[3] <= y_0_d7[3];
  always @(posedge clk)
    y_0_d8[4] <= y_0_d7[4];
  always @(posedge clk)
    y_0_d8[5] <= y_0_d7[5];
  always @(posedge clk)
    y_0_d8[6] <= y_0_d7[6];
  always @(posedge clk)
    y_0_d8[7] <= y_0_d7[7];
  always @(posedge clk)
    y_0_d8[8] <= y_0_d7[8];
  always @(posedge clk)
    y_0_d8[9] <= y_0_d7[9];
  always @(posedge clk)
    y_0_d8[10] <= y_0_d7[10];
  always @(posedge clk)
    y_0_d8[11] <= y_0_d7[11];
  always @(posedge clk)
    y_0_d8[12] <= y_0_d7[12];
  always @(posedge clk)
    y_0_d8[13] <= y_0_d7[13];
  always @(posedge clk)
    y_0_d8[14] <= y_0_d7[14];
  always @(posedge clk)
    y_0_d8[15] <= y_0_d7[15];
  always @(posedge clk)
    y_0_d8[16] <= y_0_d7[16];
  assign cin_0 = cin;
  assign r[17] = r_1;
  assign r_0 = r[16:0];
  assign s_0[16:0] = r[16:0];
  assign s_1 = { 1'hx, r_1 };
  assign x_0 = x[16:0];
  assign x_1 = x[17];
  assign y_0 = y[12:0];
  assign y_1 = { 1'h0, y[17] };
  assign y_1_d1[1] = 1'h0;
  assign y_1_d2[1] = 1'h0;
endmodule

module normalizer_z_15_15_15_freq500_uid8(clk, x, count, r);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  input clk;
  wire clk;
  output [3:0] count;
  wire [3:0] count;
  wire count0;
  reg count0_d1;
  wire count1;
  wire count2;
  reg count2_d1;
  wire count3;
  reg count3_d1;
  reg count3_d2;
  wire [14:0] level0;
  (* unused_bits = "0 1" *)
  wire [14:0] level1;
  reg [14:0] level1_d1;
  (* unused_bits = "0 1 2 3" *)
  wire [14:0] level2;
  reg [14:0] level2_d1;
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14" *)
  wire [14:0] level3;
  wire [14:0] level4;
  reg [14:0] level4_d1;
  output [14:0] r;
  wire [14:0] r;
  wire [3:0] scount;
  input [14:0] x;
  wire [14:0] x;
  assign _001_ = count3_d1 ? level4_d1[3] : level4_d1[11];
  assign _002_ = count3_d1 ? level4_d1[4] : level4_d1[12];
  assign _003_ = ~(_002_ | _001_);
  assign _004_ = count3_d1 ? level4_d1[5] : level4_d1[13];
  assign _005_ = count3_d1 ? level4_d1[6] : level4_d1[14];
  assign _006_ = _005_ | _004_;
  assign _000_ = _006_ | ~(_003_);
  assign count1 = ~(level2_d1[14] | level2_d1[13]);
  assign _007_ = ~(x[8] | x[7]);
  assign _008_ = x[10] | x[9];
  assign _009_ = _007_ & ~(_008_);
  assign _010_ = x[12] | x[11];
  assign _011_ = x[14] | x[13];
  assign _012_ = _011_ | _010_;
  assign count3 = _009_ & ~(_012_);
  assign count2 = _003_ & ~(_006_);
  assign level3[0] = level4_d1[0] & ~(count3_d1);
  assign level3[1] = level4_d1[1] & ~(count3_d1);
  assign level3[2] = level4_d1[2] & ~(count3_d1);
  assign level3[3] = level4_d1[3] & ~(count3_d1);
  assign _013_ = level4_d1[4] & ~(count3_d1);
  assign level2[4] = count2 ? level3[0] : _013_;
  assign _014_ = level4_d1[5] & ~(count3_d1);
  assign level2[5] = count2 ? level3[1] : _014_;
  assign _015_ = level4_d1[6] & ~(count3_d1);
  assign level2[6] = count2 ? level3[2] : _015_;
  assign _016_ = level4_d1[7] & ~(count3_d1);
  assign level2[7] = count2 ? level3[3] : _016_;
  assign _017_ = count3_d1 ? level4_d1[0] : level4_d1[8];
  assign level2[8] = count2 ? _013_ : _017_;
  assign _018_ = count3_d1 ? level4_d1[1] : level4_d1[9];
  assign level2[9] = count2 ? _014_ : _018_;
  assign _019_ = count3_d1 ? level4_d1[2] : level4_d1[10];
  assign level2[10] = count2 ? _015_ : _019_;
  assign level2[11] = count2 ? _016_ : _001_;
  assign level2[12] = count2 ? _017_ : _002_;
  assign level2[13] = _000_ ? _004_ : _018_;
  assign level2[14] = _000_ ? _005_ : _019_;
  assign level1[2] = count1 ? level2_d1[0] : level2_d1[2];
  assign level1[3] = count1 ? level2_d1[1] : level2_d1[3];
  assign level1[4] = count1 ? level2_d1[2] : level2_d1[4];
  assign level1[5] = count1 ? level2_d1[3] : level2_d1[5];
  assign level1[6] = count1 ? level2_d1[4] : level2_d1[6];
  assign level1[7] = count1 ? level2_d1[5] : level2_d1[7];
  assign level1[8] = count1 ? level2_d1[6] : level2_d1[8];
  assign level1[9] = count1 ? level2_d1[7] : level2_d1[9];
  assign level1[10] = count1 ? level2_d1[8] : level2_d1[10];
  assign level1[11] = count1 ? level2_d1[9] : level2_d1[11];
  assign level1[12] = count1 ? level2_d1[10] : level2_d1[12];
  assign level1[13] = count1 ? level2_d1[11] : level2_d1[13];
  assign level1[14] = count1 ? level2_d1[12] : level2_d1[14];
  assign r[0] = level1_d1[0] & ~(count0_d1);
  assign r[1] = count0_d1 ? level1_d1[0] : level1_d1[1];
  assign r[2] = count0_d1 ? level1_d1[1] : level1_d1[2];
  assign r[3] = count0_d1 ? level1_d1[2] : level1_d1[3];
  assign r[4] = count0_d1 ? level1_d1[3] : level1_d1[4];
  assign r[5] = count0_d1 ? level1_d1[4] : level1_d1[5];
  assign r[6] = count0_d1 ? level1_d1[5] : level1_d1[6];
  assign r[7] = count0_d1 ? level1_d1[6] : level1_d1[7];
  assign r[8] = count0_d1 ? level1_d1[7] : level1_d1[8];
  assign r[9] = count0_d1 ? level1_d1[8] : level1_d1[9];
  assign r[10] = count0_d1 ? level1_d1[9] : level1_d1[10];
  assign r[11] = count0_d1 ? level1_d1[10] : level1_d1[11];
  assign r[12] = count0_d1 ? level1_d1[11] : level1_d1[12];
  assign r[13] = count0_d1 ? level1_d1[12] : level1_d1[13];
  assign r[14] = count0_d1 ? level1_d1[13] : level1_d1[14];
  assign count0 = ~level1[14];
  always @(posedge clk)
    level1_d1[2] <= level1[2];
  always @(posedge clk)
    level1_d1[3] <= level1[3];
  always @(posedge clk)
    level1_d1[4] <= level1[4];
  always @(posedge clk)
    level1_d1[5] <= level1[5];
  always @(posedge clk)
    level1_d1[6] <= level1[6];
  always @(posedge clk)
    level1_d1[7] <= level1[7];
  always @(posedge clk)
    level1_d1[8] <= level1[8];
  always @(posedge clk)
    level1_d1[9] <= level1[9];
  always @(posedge clk)
    level1_d1[10] <= level1[10];
  always @(posedge clk)
    level1_d1[11] <= level1[11];
  always @(posedge clk)
    level1_d1[12] <= level1[12];
  always @(posedge clk)
    level1_d1[13] <= level1[13];
  always @(posedge clk)
    level1_d1[14] <= level1[14];
  always @(posedge clk)
    level4_d1[0] <= x[0];
  always @(posedge clk)
    level4_d1[1] <= x[1];
  always @(posedge clk)
    level4_d1[2] <= x[2];
  always @(posedge clk)
    level4_d1[3] <= x[3];
  always @(posedge clk)
    level4_d1[4] <= x[4];
  always @(posedge clk)
    level4_d1[5] <= x[5];
  always @(posedge clk)
    level4_d1[6] <= x[6];
  always @(posedge clk)
    level4_d1[7] <= x[7];
  always @(posedge clk)
    level4_d1[8] <= x[8];
  always @(posedge clk)
    level4_d1[9] <= x[9];
  always @(posedge clk)
    level4_d1[10] <= x[10];
  always @(posedge clk)
    level4_d1[11] <= x[11];
  always @(posedge clk)
    level4_d1[12] <= x[12];
  always @(posedge clk)
    level4_d1[13] <= x[13];
  always @(posedge clk)
    level4_d1[14] <= x[14];
  always @(posedge clk)
    count3_d1 <= count3;
  always @(posedge clk)
    count3_d2 <= count3_d1;
  always @(posedge clk)
    count2_d1 <= count2;
  always @(posedge clk)
    if (!_000_) level2_d1[0] <= 1'h0;
    else level2_d1[0] <= level3[0];
  always @(posedge clk)
    if (!_000_) level2_d1[1] <= 1'h0;
    else level2_d1[1] <= level3[1];
  always @(posedge clk)
    if (!_000_) level2_d1[2] <= 1'h0;
    else level2_d1[2] <= level3[2];
  always @(posedge clk)
    if (!_000_) level2_d1[3] <= 1'h0;
    else level2_d1[3] <= level3[3];
  always @(posedge clk)
    count0_d1 <= count0;
  always @(posedge clk)
    level2_d1[4] <= level2[4];
  always @(posedge clk)
    level2_d1[5] <= level2[5];
  always @(posedge clk)
    level2_d1[6] <= level2[6];
  always @(posedge clk)
    level2_d1[7] <= level2[7];
  always @(posedge clk)
    level2_d1[8] <= level2[8];
  always @(posedge clk)
    level2_d1[9] <= level2[9];
  always @(posedge clk)
    level2_d1[10] <= level2[10];
  always @(posedge clk)
    level2_d1[11] <= level2[11];
  always @(posedge clk)
    level2_d1[12] <= level2[12];
  always @(posedge clk)
    level2_d1[13] <= level2[13];
  always @(posedge clk)
    level2_d1[14] <= level2[14];
  always @(posedge clk)
    if (count1) level1_d1[0] <= 1'h0;
    else level1_d1[0] <= level2_d1[0];
  always @(posedge clk)
    if (count1) level1_d1[1] <= 1'h0;
    else level1_d1[1] <= level2_d1[1];
  assign count = { count3_d2, count2_d1, count1, count0 };
  assign level0 = r;
  assign level4 = x;
  assign scount = { count3_d2, count2_d1, count1, count0 };
endmodule

module rightshiftersticky11_by_max_13_freq500_uid4(clk, x, s, r, sticky);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  input clk;
  wire clk;
  wire [12:0] level0;
  wire [10:0] level1;
  reg [12:0] level1_d1;
  (* unused_bits = "2 3 4 5 6 7 8 9 10" *)
  wire [12:0] level2;
  reg [1:0] level2_d1;
  (* unused_bits = "4 5 6 7 8 9 10 11 12" *)
  wire [12:0] level3;
  reg [3:0] level3_d1;
  wire [12:0] level4;
  wire [3:0] ps;
  reg [2:0] ps_d1;
  output [12:0] r;
  wire [12:0] r;
  input [3:0] s;
  wire [3:0] s;
  output sticky;
  reg sticky;
  wire stk;
  wire stk0;
  wire stk0_d1;
  wire stk3;
  reg stk3_d1;
  input [10:0] x;
  wire [10:0] x;
  wire [12:0] xpadded;
  assign level3[0] = s[3] & x[6];
  assign level3[1] = x[7] & s[3];
  assign level3[2] = s[3] ? x[8] : x[0];
  assign level3[3] = s[3] ? x[9] : x[1];
  assign _018_ = s[3] ? x[10] : x[2];
  assign level2[0] = s[2] ? _018_ : level3[0];
  assign _019_ = x[3] & ~(s[3]);
  assign level2[1] = s[2] ? _019_ : level3[1];
  assign _020_ = x[9] & ~(s[3]);
  assign level2[11] = _020_ & ~(s[2]);
  assign _021_ = x[10] & ~(s[3]);
  assign level2[12] = _021_ & ~(s[2]);
  assign _022_ = x[4] & ~(s[3]);
  assign _023_ = s[2] ? _022_ : level3[2];
  assign level1[0] = s[1] ? _023_ : level2[0];
  assign _024_ = x[5] & ~(s[3]);
  assign _025_ = s[2] ? _024_ : level3[3];
  assign level1[1] = s[1] ? _025_ : level2[1];
  assign _026_ = x[6] & ~(s[3]);
  assign _027_ = s[2] ? _026_ : _018_;
  assign level1[2] = s[1] ? _027_ : _023_;
  assign _028_ = x[7] & ~(s[3]);
  assign _029_ = s[2] ? _028_ : _019_;
  assign level1[3] = s[1] ? _029_ : _025_;
  assign _030_ = x[8] & ~(s[3]);
  assign _031_ = s[2] ? _030_ : _022_;
  assign level1[4] = s[1] ? _031_ : _027_;
  assign _000_ = s[2] ? _020_ : _024_;
  assign level1[5] = s[1] ? _000_ : _029_;
  assign _001_ = s[2] ? _021_ : _026_;
  assign level1[6] = s[1] ? _001_ : _031_;
  assign _002_ = _028_ & ~(s[2]);
  assign level1[7] = s[1] ? _002_ : _000_;
  assign _003_ = _030_ & ~(s[2]);
  assign level1[8] = s[1] ? _003_ : _001_;
  assign level1[9] = s[1] ? level2[11] : _002_;
  assign level1[10] = s[1] ? level2[12] : _003_;
  assign r[0] = ps_d1[0] ? level1_d1[1] : level1_d1[0];
  assign r[1] = ps_d1[0] ? level1_d1[2] : level1_d1[1];
  assign r[2] = ps_d1[0] ? level1_d1[3] : level1_d1[2];
  assign r[3] = ps_d1[0] ? level1_d1[4] : level1_d1[3];
  assign r[4] = ps_d1[0] ? level1_d1[5] : level1_d1[4];
  assign r[5] = ps_d1[0] ? level1_d1[6] : level1_d1[5];
  assign r[6] = ps_d1[0] ? level1_d1[7] : level1_d1[6];
  assign r[7] = ps_d1[0] ? level1_d1[8] : level1_d1[7];
  assign r[8] = ps_d1[0] ? level1_d1[9] : level1_d1[8];
  assign r[9] = ps_d1[0] ? level1_d1[10] : level1_d1[9];
  assign r[10] = ps_d1[0] ? level1_d1[11] : level1_d1[10];
  assign r[11] = ps_d1[0] ? level1_d1[12] : level1_d1[11];
  assign r[12] = level1_d1[12] & ~(ps_d1[0]);
  assign _004_ = ~(x[1] | x[0]);
  assign _005_ = x[3] | x[2];
  assign _006_ = _004_ & ~(_005_);
  assign _007_ = x[5] | x[4];
  assign _008_ = _006_ & ~(_007_);
  assign stk3 = s[3] & ~(_008_);
  assign _009_ = ps_d1[0] & level1_d1[0];
  assign _010_ = ~(level2_d1[1] | level2_d1[0]);
  assign _011_ = ps_d1[1] & ~(_010_);
  assign _012_ = ~(level3_d1[1] | level3_d1[0]);
  assign _013_ = level3_d1[3] | level3_d1[2];
  assign _014_ = _012_ & ~(_013_);
  assign _015_ = ps_d1[2] & ~(_014_);
  assign _016_ = _015_ | stk3_d1;
  assign _017_ = _016_ | _011_;
  assign stk0 = _017_ | _009_;
  always @(posedge clk)
    level1_d1[0] <= level1[0];
  always @(posedge clk)
    level1_d1[1] <= level1[1];
  always @(posedge clk)
    level1_d1[2] <= level1[2];
  always @(posedge clk)
    level1_d1[3] <= level1[3];
  always @(posedge clk)
    level1_d1[4] <= level1[4];
  always @(posedge clk)
    level1_d1[5] <= level1[5];
  always @(posedge clk)
    level1_d1[6] <= level1[6];
  always @(posedge clk)
    level1_d1[7] <= level1[7];
  always @(posedge clk)
    level1_d1[8] <= level1[8];
  always @(posedge clk)
    level1_d1[9] <= level1[9];
  always @(posedge clk)
    level1_d1[10] <= level1[10];
  always @(posedge clk)
    ps_d1[0] <= s[0];
  always @(posedge clk)
    ps_d1[1] <= s[1];
  always @(posedge clk)
    ps_d1[2] <= s[2];
  always @(posedge clk)
    stk3_d1 <= stk3;
  always @(posedge clk)
    level3_d1[0] <= level3[0];
  always @(posedge clk)
    level3_d1[1] <= level3[1];
  always @(posedge clk)
    level3_d1[2] <= level3[2];
  always @(posedge clk)
    level3_d1[3] <= level3[3];
  always @(posedge clk)
    level2_d1[0] <= level2[0];
  always @(posedge clk)
    level2_d1[1] <= level2[1];
  always @(posedge clk)
    sticky <= stk0;
  always @(posedge clk)
    if (s[1]) level1_d1[11] <= 1'h0;
    else level1_d1[11] <= level2[11];
  always @(posedge clk)
    if (s[1]) level1_d1[12] <= 1'h0;
    else level1_d1[12] <= level2[12];
  assign level0 = r;
  assign level4 = { x, 2'h0 };
  assign ps = s;
  assign stk = sticky;
  assign stk0_d1 = sticky;
  assign xpadded = { x, 2'h0 };
endmodule

module top_module(clk, X, Y, R);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire _238_;
  wire _239_;
  wire _240_;
  wire _241_;
  wire _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:569.20-569.21" *)
  wire [1:0] \194.A ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:571.28-571.29" *)
  wire [5:0] \194.B ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:583.28-583.35" *)
  (* unused_bits = "2 5" *)
  wire [5:0] \194.B_AND_S ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:589.23-589.33" *)
  (* unused_bits = "1" *)
  wire [2:0] \194.B_OR[0].B_AND_BITS ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:589.23-589.33" *)
  (* unused_bits = "2" *)
  wire [2:0] \194.B_OR[1].B_AND_BITS ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:573.22-573.23" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] \194.S ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:575.21-575.22" *)
  wire [1:0] \194.Y ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:578.19-578.22" *)
  (* unused_bits = "0 1" *)
  wire [1:0] \194.Y_B ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:569.20-569.21" *)
  wire [1:0] \320.A ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:571.28-571.29" *)
  wire [5:0] \320.B ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:583.28-583.35" *)
  (* unused_bits = "2 5" *)
  wire [5:0] \320.B_AND_S ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:589.23-589.33" *)
  (* unused_bits = "1" *)
  wire [2:0] \320.B_OR[0].B_AND_BITS ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:589.23-589.33" *)
  (* unused_bits = "2" *)
  wire [2:0] \320.B_OR[1].B_AND_BITS ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:573.22-573.23" *)
  (* unused_bits = "0 1 2" *)
  wire [2:0] \320.S ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:575.21-575.22" *)
  wire [1:0] \320.Y ;
  (* force_downto = 32'd1 *)
  (* src = "/opt/oss-cad-suite/lib/../share/yosys/techmap.v:578.19-578.22" *)
  (* unused_bits = "0 1" *)
  wire [1:0] \320.Y_B ;
  output [17:0] R;
  wire [17:0] R;
  input [17:0] X;
  wire [17:0] X;
  input [17:0] Y;
  wire [17:0] Y;
  wire cinsigadd;
  input clk;
  wire clk;
  wire [17:0] computedr;
  wire effsub;
  reg effsub_d1;
  reg effsub_d2;
  reg effsub_d3;
  reg effsub_d4;
  reg effsub_d5;
  reg effsub_d6;
  reg effsub_d7;
  reg effsub_d8;
  wire [13:0] effsubvector;
  wire [13:0] effsubvector_d1;
  wire eqdiffsign;
  reg eqdiffsign_d1;
  reg eqdiffsign_d2;
  reg eqdiffsign_d3;
  wire [16:0] excexpfracx;
  wire [16:0] excexpfracy;
  wire [1:0] excr;
  wire [1:0] excrt;
  wire [1:0] excrt2;
  reg [1:0] excrt2_d1;
  reg [1:0] excrt_d1;
  reg [1:0] excrt_d2;
  reg [1:0] excrt_d3;
  reg [1:0] excrt_d4;
  reg [1:0] excrt_d5;
  reg [1:0] excrt_d6;
  reg [1:0] excrt_d7;
  reg [1:0] excrt_d8;
  wire [1:0] excx;
  wire [1:0] excy;
  wire [1:0] excy_d1;
  wire [3:0] exexpexc;
  wire [4:0] expdiff;
  reg [4:0] expdiff_d1;
  wire [17:0] expfrac;
  wire [4:0] expr;
  reg [4:0] expr_d1;
  wire [4:0] expx;
  reg [4:0] expx_d1;
  wire [5:0] extendedexpinc;
  reg [5:0] extendedexpinc_d1;
  reg [5:0] extendedexpinc_d2;
  reg [5:0] extendedexpinc_d3;
  reg [5:0] extendedexpinc_d4;
  reg [5:0] extendedexpinc_d5;
  reg [5:0] extendedexpinc_d6;
  wire [13:0] \fracadder:232 ;
  wire [13:0] fracaddresult;
  wire [9:0] fracr;
  reg [9:0] fracr_d1;
  wire [14:0] fracsticky;
  wire [11:0] fracxpad;
  wire [10:0] fracy;
  wire [13:0] fracypad;
  wire [13:0] fracypadxorop;
  wire lsb;
  wire [3:0] \lzcandshifter:236 ;
  (* unused_bits = "14" *)
  wire [14:0] \lzcandshifter:237 ;
  wire needtoround;
  wire [17:0] newx;
  (* unused_bits = "10 11 12 13 14" *)
  wire [17:0] newy;
  reg [9:0] newy_d1;
  wire [3:0] nzerosnew;
  reg [3:0] nzerosnew_d1;
  wire [12:0] \rightshiftercomponent:211 ;
  wire \rightshiftercomponent:212 ;
  wire rnd;
  (* unused_bits = "0" *)
  wire [17:0] roundedexpfrac;
  (* unused_bits = "0" *)
  wire [17:0] \roundingadder:275 ;
  (* unused_bits = "14" *)
  wire [14:0] shiftedfrac;
  wire [12:0] shiftedfracy;
  wire [3:0] shiftval;
  reg signr2_d1;
  reg signr2_d2;
  reg signr_d1;
  reg signr_d2;
  reg signr_d3;
  reg signr_d4;
  reg signr_d5;
  reg signr_d6;
  wire signx;
  reg signx_d1;
  wire signy;
  wire signy_d1;
  wire sticky;
  reg sticky_d1;
  wire [5:0] sxsyexnxy;
  wire [5:0] sxsyexnxy_d1;
  wire [6:0] updatedexp;
  wire [1:0] upexc;
  assign extendedexpinc[0] = ~expx_d1[0];
  assign updatedexp[0] = extendedexpinc_d6[0] ^ nzerosnew_d1[0];
  assign _002_ = ~(extendedexpinc_d6[5] | extendedexpinc_d6[4]);
  assign _003_ = nzerosnew_d1[3] | ~(extendedexpinc_d6[3]);
  assign _004_ = extendedexpinc_d6[3] ^ nzerosnew_d1[3];
  assign _005_ = nzerosnew_d1[2] | ~(extendedexpinc_d6[2]);
  assign _006_ = ~(_005_ | _004_);
  assign _007_ = _003_ & ~(_006_);
  assign _008_ = extendedexpinc_d6[2] ^ nzerosnew_d1[2];
  assign _009_ = ~(_008_ | _004_);
  assign _010_ = nzerosnew_d1[1] | ~(extendedexpinc_d6[1]);
  assign _011_ = extendedexpinc_d6[1] ^ nzerosnew_d1[1];
  assign _012_ = nzerosnew_d1[0] & ~(extendedexpinc_d6[0]);
  assign _013_ = ~(_012_ | _011_);
  assign _014_ = _010_ & ~(_013_);
  assign _015_ = _009_ & ~(_014_);
  assign _016_ = _007_ & ~(_015_);
  assign _017_ = _002_ & ~(_016_);
  assign updatedexp[6] = _002_ & ~(_017_);
  assign fracy[10] = sxsyexnxy_d1[1] | sxsyexnxy_d1[0];
  assign _018_ = nzerosnew[0] & nzerosnew[1];
  assign _019_ = ~(nzerosnew[2] & nzerosnew[3]);
  assign eqdiffsign = _018_ & ~(_019_);
  assign _020_ = expdiff_d1[3] & expdiff_d1[2];
  assign _021_ = expdiff_d1[1] | expdiff_d1[0];
  assign _022_ = _020_ & ~(_021_);
  assign _023_ = _020_ & ~(_022_);
  assign _024_ = _023_ | expdiff_d1[4];
  assign shiftval[0] = _024_ | expdiff_d1[0];
  assign shiftval[1] = expdiff_d1[1] & ~(_024_);
  assign shiftval[2] = _024_ | expdiff_d1[2];
  assign shiftval[3] = _024_ | expdiff_d1[3];
  assign _025_ = ~(excrt_d8[0] & excrt_d8[1]);
  assign _026_ = ~(eqdiffsign_d3 & effsub_d8);
  assign _027_ = _025_ & ~(_026_);
  assign R[16] = excrt2_d1[0] & ~(_027_);
  assign R[17] = excrt2_d1[1] & ~(_027_);
  assign _028_ = sxsyexnxy_d1[1] | ~(sxsyexnxy_d1[0]);
  assign _029_ = sxsyexnxy_d1[3] | ~(sxsyexnxy_d1[2]);
  assign _030_ = ~(_029_ | _028_);
  assign _031_ = ~(signx_d1 | sxsyexnxy_d1[4]);
  assign _032_ = _031_ & _030_;
  assign _033_ = sxsyexnxy_d1[4] & ~(signx_d1);
  assign _034_ = _033_ & _030_;
  assign _035_ = ~(_034_ | _032_);
  assign _036_ = signx_d1 & ~(sxsyexnxy_d1[4]);
  assign _037_ = _036_ & _030_;
  assign _038_ = _035_ & ~(_037_);
  assign _039_ = signx_d1 & sxsyexnxy_d1[4];
  assign _040_ = _039_ & _030_;
  assign _041_ = _038_ & ~(_040_);
  assign _042_ = _029_ | fracy[10];
  assign _043_ = _031_ & ~(_042_);
  assign _044_ = _041_ & ~(_043_);
  assign _045_ = _033_ & ~(_042_);
  assign _046_ = _044_ & ~(_045_);
  assign _047_ = _036_ & ~(_042_);
  assign _048_ = _046_ & ~(_047_);
  assign _049_ = _039_ & ~(_042_);
  assign _050_ = _048_ & ~(_049_);
  assign _051_ = sxsyexnxy_d1[2] | sxsyexnxy_d1[3];
  assign _052_ = _051_ | _028_;
  assign _053_ = _031_ & ~(_052_);
  assign _054_ = _050_ & ~(_053_);
  assign _055_ = _033_ & ~(_052_);
  assign _056_ = _054_ & ~(_055_);
  assign _057_ = _036_ & ~(_052_);
  assign _058_ = _056_ & ~(_057_);
  assign _059_ = _039_ & ~(_052_);
  assign _060_ = _058_ & ~(_059_);
  assign _061_ = _051_ | fracy[10];
  assign _062_ = _031_ & ~(_061_);
  assign _063_ = _033_ & ~(_061_);
  assign _064_ = _063_ | _062_;
  assign _065_ = _036_ & ~(_061_);
  assign _066_ = _065_ | _064_;
  assign _067_ = _039_ & ~(_061_);
  assign _068_ = _067_ | _066_;
  assign _069_ = _060_ & ~(_068_);
  assign _070_ = sxsyexnxy_d1[0] | ~(sxsyexnxy_d1[1]);
  assign _071_ = sxsyexnxy_d1[2] | ~(sxsyexnxy_d1[3]);
  assign _072_ = _071_ | _070_;
  assign _073_ = _039_ & ~(_072_);
  assign _074_ = _031_ & ~(_072_);
  assign _075_ = _074_ | _073_;
  assign _076_ = _071_ | fracy[10];
  assign _077_ = _031_ & ~(_076_);
  assign _078_ = _077_ | _075_;
  assign _079_ = _033_ & ~(_076_);
  assign _080_ = _079_ | _078_;
  assign _081_ = _036_ & ~(_076_);
  assign _082_ = _081_ | _080_;
  assign _083_ = _039_ & ~(_076_);
  assign _084_ = _083_ | _082_;
  assign _085_ = _070_ | _051_;
  assign _086_ = _031_ & ~(_085_);
  assign _087_ = _086_ | _084_;
  assign _088_ = _033_ & ~(_085_);
  assign _089_ = _088_ | _087_;
  assign _090_ = _036_ & ~(_085_);
  assign _091_ = _090_ | _089_;
  assign _092_ = _039_ & ~(_085_);
  assign _093_ = _092_ | _091_;
  assign _094_ = _071_ | _028_;
  assign _095_ = _031_ & ~(_094_);
  assign _096_ = _095_ | _093_;
  assign _097_ = _033_ & ~(_094_);
  assign _098_ = _097_ | _096_;
  assign _099_ = _036_ & ~(_094_);
  assign _100_ = _099_ | _098_;
  assign _101_ = _039_ & ~(_094_);
  assign _102_ = _101_ | _100_;
  assign _103_ = _070_ | _029_;
  assign _104_ = _031_ & ~(_103_);
  assign _105_ = _104_ | _102_;
  assign _106_ = _033_ & ~(_103_);
  assign _107_ = _106_ | _105_;
  assign _108_ = _036_ & ~(_103_);
  assign _109_ = _108_ | _107_;
  assign _110_ = _039_ & ~(_103_);
  assign _111_ = _110_ | _109_;
  assign _112_ = _069_ & ~(_111_);
  assign excrt[0] = _112_ | ~(_060_);
  assign excrt[1] = _111_ | _069_;
  assign _113_ = excrt_d7[0] & ~(excrt_d7[1]);
  assign _114_ = ~(roundedexpfrac[16] | roundedexpfrac[17]);
  assign _115_ = _114_ & _113_;
  assign _116_ = ~(excrt_d7[0] | excrt_d7[1]);
  assign _117_ = _116_ & _114_;
  assign _118_ = roundedexpfrac[16] & ~(roundedexpfrac[17]);
  assign _119_ = _118_ & _116_;
  assign _120_ = _119_ | _117_;
  assign _121_ = roundedexpfrac[17] & ~(roundedexpfrac[16]);
  assign _122_ = _121_ & _116_;
  assign _123_ = _122_ | _120_;
  assign _124_ = roundedexpfrac[16] & roundedexpfrac[17];
  assign _125_ = _124_ & _116_;
  assign _126_ = _125_ | _123_;
  assign _127_ = _121_ & _113_;
  assign _128_ = _127_ | _126_;
  assign _129_ = _124_ & _113_;
  assign _130_ = ~(_129_ | _128_);
  assign _131_ = _130_ & ~(_115_);
  assign _132_ = excrt_d7[0] | ~(excrt_d7[1]);
  assign _133_ = _114_ & ~(_132_);
  assign _134_ = _118_ & ~(_132_);
  assign _135_ = _134_ | _133_;
  assign _136_ = _121_ & ~(_132_);
  assign _137_ = _136_ | _135_;
  assign _138_ = _124_ & ~(_132_);
  assign _139_ = _138_ | _137_;
  assign _140_ = _118_ & _113_;
  assign _141_ = _140_ | _139_;
  assign _142_ = _131_ & ~(_141_);
  assign excrt2[0] = _142_ | _115_;
  assign excrt2[1] = _141_ | _131_;
  assign _143_ = Y[17] | ~(X[17]);
  assign _144_ = ~(X[17] ^ Y[17]);
  assign _145_ = Y[16] | ~(X[16]);
  assign _146_ = ~(X[16] ^ Y[16]);
  assign _147_ = Y[14] | ~(X[14]);
  assign _148_ = _146_ & ~(_147_);
  assign _149_ = _145_ & ~(_148_);
  assign _150_ = X[14] ^ Y[14];
  assign _151_ = _146_ & ~(_150_);
  assign _152_ = Y[13] | ~(X[13]);
  assign _153_ = X[13] ^ Y[13];
  assign _154_ = Y[12] | ~(X[12]);
  assign _155_ = ~(_154_ | _153_);
  assign _156_ = _152_ & ~(_155_);
  assign _157_ = _151_ & ~(_156_);
  assign _158_ = _149_ & ~(_157_);
  assign _159_ = X[12] ^ Y[12];
  assign _160_ = ~(_159_ | _153_);
  assign _161_ = _160_ & _151_;
  assign _162_ = Y[11] | ~(X[11]);
  assign _163_ = X[11] ^ Y[11];
  assign _164_ = X[10] & ~(Y[10]);
  assign _165_ = _164_ & ~(_163_);
  assign _166_ = _162_ & ~(_165_);
  assign expdiff[0] = X[10] ^ Y[10];
  assign _167_ = ~(_163_ | expdiff[0]);
  assign _168_ = Y[9] | ~(X[9]);
  assign _169_ = X[9] ^ Y[9];
  assign _170_ = X[8] & ~(Y[8]);
  assign _171_ = _170_ & ~(_169_);
  assign _172_ = _168_ & ~(_171_);
  assign _173_ = _167_ & ~(_172_);
  assign _174_ = _166_ & ~(_173_);
  assign _175_ = _161_ & ~(_174_);
  assign _176_ = _158_ & ~(_175_);
  assign _177_ = X[8] ^ Y[8];
  assign _178_ = ~(_177_ | _169_);
  assign _179_ = ~(_178_ & _167_);
  assign _180_ = _161_ & ~(_179_);
  assign _181_ = Y[7] | ~(X[7]);
  assign _182_ = ~(X[7] ^ Y[7]);
  assign _183_ = Y[6] | ~(X[6]);
  assign _184_ = _182_ & ~(_183_);
  assign _185_ = _181_ & ~(_184_);
  assign _186_ = X[6] ^ Y[6];
  assign _187_ = _182_ & ~(_186_);
  assign _188_ = Y[5] | ~(X[5]);
  assign _189_ = X[5] ^ Y[5];
  assign _190_ = X[4] & ~(Y[4]);
  assign _191_ = _190_ & ~(_189_);
  assign _192_ = _188_ & ~(_191_);
  assign _193_ = _187_ & ~(_192_);
  assign _194_ = _185_ & ~(_193_);
  assign _195_ = X[4] ^ Y[4];
  assign _196_ = _195_ | _189_;
  assign _197_ = _187_ & ~(_196_);
  assign _198_ = Y[3] | ~(X[3]);
  assign _199_ = ~(X[3] ^ Y[3]);
  assign _200_ = Y[2] | ~(X[2]);
  assign _201_ = _199_ & ~(_200_);
  assign _202_ = _198_ & ~(_201_);
  assign _203_ = X[2] ^ Y[2];
  assign _204_ = _199_ & ~(_203_);
  assign _205_ = Y[1] | ~(X[1]);
  assign _206_ = ~(X[1] ^ Y[1]);
  assign _207_ = Y[0] & ~(X[0]);
  assign _208_ = _206_ & ~(_207_);
  assign _209_ = _205_ & ~(_208_);
  assign _210_ = _204_ & ~(_209_);
  assign _211_ = _202_ & ~(_210_);
  assign _212_ = _197_ & ~(_211_);
  assign _213_ = _194_ & ~(_212_);
  assign _214_ = _180_ & ~(_213_);
  assign _215_ = _176_ & ~(_214_);
  assign _216_ = _144_ & ~(_215_);
  assign _217_ = _143_ & ~(_216_);
  assign _218_ = _164_ ^ _163_;
  assign _219_ = Y[10] & ~(X[10]);
  assign _220_ = _219_ ^ _163_;
  assign expdiff[1] = _217_ ? _218_ : _220_;
  assign _221_ = X[11] | ~(Y[11]);
  assign _222_ = ~(_164_ | _163_);
  assign _223_ = _221_ & ~(_222_);
  assign _224_ = _223_ ^ _159_;
  assign _225_ = ~(_219_ | _163_);
  assign _226_ = _162_ & ~(_225_);
  assign _227_ = _226_ ^ _159_;
  assign expdiff[2] = _217_ ? _224_ : _227_;
  assign _228_ = X[12] | ~(Y[12]);
  assign _229_ = ~_159_;
  assign _230_ = _229_ & ~(_223_);
  assign _231_ = _228_ & ~(_230_);
  assign _232_ = _231_ ^ _153_;
  assign _233_ = _229_ & ~(_226_);
  assign _234_ = _154_ & ~(_233_);
  assign _235_ = _234_ ^ _153_;
  assign expdiff[3] = _217_ ? _232_ : _235_;
  assign _236_ = X[13] | ~(Y[13]);
  assign _237_ = ~(_228_ | _153_);
  assign _238_ = _236_ & ~(_237_);
  assign _239_ = _160_ & ~(_223_);
  assign _240_ = _238_ & ~(_239_);
  assign _241_ = _240_ ^ _150_;
  assign _242_ = _160_ & ~(_226_);
  assign _243_ = _156_ & ~(_242_);
  assign _244_ = _243_ ^ _150_;
  assign expdiff[4] = _217_ ? _241_ : _244_;
  assign newx[0] = _217_ ? Y[0] : X[0];
  assign newx[1] = _217_ ? Y[1] : X[1];
  assign newx[2] = _217_ ? Y[2] : X[2];
  assign newx[3] = _217_ ? Y[3] : X[3];
  assign newx[4] = _217_ ? Y[4] : X[4];
  assign newx[5] = _217_ ? Y[5] : X[5];
  assign newx[6] = _217_ ? Y[6] : X[6];
  assign newx[7] = _217_ ? Y[7] : X[7];
  assign newx[8] = _217_ ? Y[8] : X[8];
  assign newx[9] = _217_ ? Y[9] : X[9];
  assign newx[10] = _217_ ? Y[10] : X[10];
  assign newx[11] = _217_ ? Y[11] : X[11];
  assign newx[12] = _217_ ? Y[12] : X[12];
  assign newx[13] = _217_ ? Y[13] : X[13];
  assign newx[14] = _217_ ? Y[14] : X[14];
  assign signx = _217_ ? Y[15] : X[15];
  assign newx[16] = _217_ ? Y[16] : X[16];
  assign newx[17] = X[17] | Y[17];
  assign newy[0] = _217_ ? X[0] : Y[0];
  assign newy[1] = _217_ ? X[1] : Y[1];
  assign newy[2] = _217_ ? X[2] : Y[2];
  assign newy[3] = _217_ ? X[3] : Y[3];
  assign newy[4] = _217_ ? X[4] : Y[4];
  assign newy[5] = _217_ ? X[5] : Y[5];
  assign newy[6] = _217_ ? X[6] : Y[6];
  assign newy[7] = _217_ ? X[7] : Y[7];
  assign newy[8] = _217_ ? X[8] : Y[8];
  assign newy[9] = _217_ ? X[9] : Y[9];
  assign signy = _217_ ? X[15] : Y[15];
  assign newy[16] = _217_ ? X[16] : Y[16];
  assign newy[17] = X[17] & Y[17];
  assign fracy[0] = fracy[10] & newy_d1[0];
  assign fracy[1] = fracy[10] & newy_d1[1];
  assign fracy[2] = fracy[10] & newy_d1[2];
  assign fracy[3] = fracy[10] & newy_d1[3];
  assign fracy[4] = fracy[10] & newy_d1[4];
  assign fracy[5] = fracy[10] & newy_d1[5];
  assign fracy[6] = fracy[10] & newy_d1[6];
  assign fracy[7] = fracy[10] & newy_d1[7];
  assign fracy[8] = fracy[10] & newy_d1[8];
  assign fracy[9] = fracy[10] & newy_d1[9];
  assign _001_ = _065_ | _063_;
  assign cinsigadd = effsub_d2 & ~(sticky);
  assign _245_ = shiftedfrac[1] | shiftedfrac[2];
  assign _246_ = ~(_245_ | shiftedfrac[0]);
  assign _247_ = \lzcandshifter:237 [3] & ~(_246_);
  assign _248_ = ~(_246_ & \lzcandshifter:237 [3]);
  assign _249_ = \lzcandshifter:237 [4] & ~(_248_);
  assign needtoround = _249_ | _247_;
  assign _000_ = eqdiffsign_d1 & effsub_d6;
  assign fracypadxorop[0] = effsub_d1 ^ \rightshiftercomponent:211 [0];
  assign fracypadxorop[1] = \rightshiftercomponent:211 [1] ^ effsub_d1;
  assign fracypadxorop[2] = \rightshiftercomponent:211 [2] ^ effsub_d1;
  assign fracypadxorop[3] = \rightshiftercomponent:211 [3] ^ effsub_d1;
  assign fracypadxorop[4] = \rightshiftercomponent:211 [4] ^ effsub_d1;
  assign fracypadxorop[5] = \rightshiftercomponent:211 [5] ^ effsub_d1;
  assign fracypadxorop[6] = \rightshiftercomponent:211 [6] ^ effsub_d1;
  assign fracypadxorop[7] = \rightshiftercomponent:211 [7] ^ effsub_d1;
  assign fracypadxorop[8] = \rightshiftercomponent:211 [8] ^ effsub_d1;
  assign fracypadxorop[9] = \rightshiftercomponent:211 [9] ^ effsub_d1;
  assign fracypadxorop[10] = \rightshiftercomponent:211 [10] ^ effsub_d1;
  assign fracypadxorop[11] = \rightshiftercomponent:211 [11] ^ effsub_d1;
  assign fracypadxorop[12] = \rightshiftercomponent:211 [12] ^ effsub_d1;
  assign extendedexpinc[1] = expx_d1[1] ^ expx_d1[0];
  assign _250_ = expx_d1[1] & expx_d1[0];
  assign extendedexpinc[2] = _250_ ^ expx_d1[2];
  assign _251_ = _250_ & expx_d1[2];
  assign extendedexpinc[3] = _251_ ^ expx_d1[3];
  assign _252_ = ~(expx_d1[3] & expx_d1[2]);
  assign _253_ = _250_ & ~(_252_);
  assign extendedexpinc[4] = _253_ ^ expx_d1[4];
  assign updatedexp[1] = _012_ ^ _011_;
  assign updatedexp[2] = _014_ ^ _008_;
  assign _254_ = ~(_014_ | _008_);
  assign _255_ = _005_ & ~(_254_);
  assign updatedexp[3] = _255_ ^ _004_;
  assign updatedexp[4] = _016_ ^ extendedexpinc_d6[4];
  assign _256_ = _016_ & ~(extendedexpinc_d6[4]);
  assign updatedexp[5] = _256_ ^ extendedexpinc_d6[5];
  assign extendedexpinc[5] = _253_ & expx_d1[4];
  assign effsub = _036_ | _033_;
  always @(posedge clk)
    expdiff_d1[0] <= expdiff[0];
  always @(posedge clk)
    expdiff_d1[1] <= expdiff[1];
  always @(posedge clk)
    expdiff_d1[2] <= expdiff[2];
  always @(posedge clk)
    expdiff_d1[3] <= expdiff[3];
  always @(posedge clk)
    expdiff_d1[4] <= expdiff[4];
  always @(posedge clk)
    newy_d1[0] <= newy[0];
  always @(posedge clk)
    newy_d1[1] <= newy[1];
  always @(posedge clk)
    newy_d1[2] <= newy[2];
  always @(posedge clk)
    newy_d1[3] <= newy[3];
  always @(posedge clk)
    newy_d1[4] <= newy[4];
  always @(posedge clk)
    newy_d1[5] <= newy[5];
  always @(posedge clk)
    newy_d1[6] <= newy[6];
  always @(posedge clk)
    newy_d1[7] <= newy[7];
  always @(posedge clk)
    newy_d1[8] <= newy[8];
  always @(posedge clk)
    newy_d1[9] <= newy[9];
  always @(posedge clk)
    expx_d1[0] <= newx[10];
  always @(posedge clk)
    expx_d1[1] <= newx[11];
  always @(posedge clk)
    expx_d1[2] <= newx[12];
  always @(posedge clk)
    expx_d1[3] <= newx[13];
  always @(posedge clk)
    expx_d1[4] <= newx[14];
  always @(posedge clk)
    signx_d1 <= signx;
  always @(posedge clk)
    effsub_d1 <= effsub;
  always @(posedge clk)
    effsub_d2 <= effsub_d1;
  always @(posedge clk)
    effsub_d3 <= effsub_d2;
  always @(posedge clk)
    effsub_d4 <= effsub_d3;
  always @(posedge clk)
    effsub_d5 <= effsub_d4;
  always @(posedge clk)
    effsub_d6 <= effsub_d5;
  always @(posedge clk)
    effsub_d7 <= effsub_d6;
  always @(posedge clk)
    effsub_d8 <= effsub_d7;
  reg \sxsyexnxy_d1_reg[0] ;
  always @(posedge clk)
    \sxsyexnxy_d1_reg[0]  <= newy[16];
  assign sxsyexnxy_d1[0] = \sxsyexnxy_d1_reg[0] ;
  reg \sxsyexnxy_d1_reg[1] ;
  always @(posedge clk)
    \sxsyexnxy_d1_reg[1]  <= newy[17];
  assign sxsyexnxy_d1[1] = \sxsyexnxy_d1_reg[1] ;
  reg \sxsyexnxy_d1_reg[2] ;
  always @(posedge clk)
    \sxsyexnxy_d1_reg[2]  <= newx[16];
  assign sxsyexnxy_d1[2] = \sxsyexnxy_d1_reg[2] ;
  reg \sxsyexnxy_d1_reg[3] ;
  always @(posedge clk)
    \sxsyexnxy_d1_reg[3]  <= newx[17];
  assign sxsyexnxy_d1[3] = \sxsyexnxy_d1_reg[3] ;
  reg \sxsyexnxy_d1_reg[4] ;
  always @(posedge clk)
    \sxsyexnxy_d1_reg[4]  <= signy;
  assign sxsyexnxy_d1[4] = \sxsyexnxy_d1_reg[4] ;
  always @(posedge clk)
    excrt_d1[0] <= excrt[0];
  always @(posedge clk)
    excrt_d1[1] <= excrt[1];
  always @(posedge clk)
    excrt_d2[0] <= excrt_d1[0];
  always @(posedge clk)
    excrt_d2[1] <= excrt_d1[1];
  always @(posedge clk)
    excrt_d3[0] <= excrt_d2[0];
  always @(posedge clk)
    excrt_d3[1] <= excrt_d2[1];
  always @(posedge clk)
    excrt_d4[0] <= excrt_d3[0];
  always @(posedge clk)
    excrt_d4[1] <= excrt_d3[1];
  always @(posedge clk)
    excrt_d5[0] <= excrt_d4[0];
  always @(posedge clk)
    excrt_d5[1] <= excrt_d4[1];
  always @(posedge clk)
    excrt_d6[0] <= excrt_d5[0];
  always @(posedge clk)
    excrt_d6[1] <= excrt_d5[1];
  always @(posedge clk)
    excrt_d7[0] <= excrt_d6[0];
  always @(posedge clk)
    excrt_d7[1] <= excrt_d6[1];
  always @(posedge clk)
    excrt_d8[0] <= excrt_d7[0];
  always @(posedge clk)
    excrt_d8[1] <= excrt_d7[1];
  always @(posedge clk)
    signr_d2 <= signr_d1;
  always @(posedge clk)
    signr_d3 <= signr_d2;
  always @(posedge clk)
    signr_d4 <= signr_d3;
  always @(posedge clk)
    signr_d5 <= signr_d4;
  always @(posedge clk)
    signr_d6 <= signr_d5;
  always @(posedge clk)
    sticky_d1 <= sticky;
  always @(posedge clk)
    nzerosnew_d1[0] <= nzerosnew[0];
  always @(posedge clk)
    nzerosnew_d1[1] <= nzerosnew[1];
  always @(posedge clk)
    nzerosnew_d1[2] <= nzerosnew[2];
  always @(posedge clk)
    nzerosnew_d1[3] <= nzerosnew[3];
  always @(posedge clk)
    extendedexpinc_d1[0] <= extendedexpinc[0];
  always @(posedge clk)
    extendedexpinc_d1[1] <= extendedexpinc[1];
  always @(posedge clk)
    extendedexpinc_d1[2] <= extendedexpinc[2];
  always @(posedge clk)
    extendedexpinc_d1[3] <= extendedexpinc[3];
  always @(posedge clk)
    extendedexpinc_d1[4] <= extendedexpinc[4];
  always @(posedge clk)
    extendedexpinc_d1[5] <= extendedexpinc[5];
  always @(posedge clk)
    extendedexpinc_d2[0] <= extendedexpinc_d1[0];
  always @(posedge clk)
    extendedexpinc_d2[1] <= extendedexpinc_d1[1];
  always @(posedge clk)
    extendedexpinc_d2[2] <= extendedexpinc_d1[2];
  always @(posedge clk)
    extendedexpinc_d2[3] <= extendedexpinc_d1[3];
  always @(posedge clk)
    extendedexpinc_d2[4] <= extendedexpinc_d1[4];
  always @(posedge clk)
    extendedexpinc_d2[5] <= extendedexpinc_d1[5];
  always @(posedge clk)
    extendedexpinc_d3[0] <= extendedexpinc_d2[0];
  always @(posedge clk)
    extendedexpinc_d3[1] <= extendedexpinc_d2[1];
  always @(posedge clk)
    extendedexpinc_d3[2] <= extendedexpinc_d2[2];
  always @(posedge clk)
    extendedexpinc_d3[3] <= extendedexpinc_d2[3];
  always @(posedge clk)
    extendedexpinc_d3[4] <= extendedexpinc_d2[4];
  always @(posedge clk)
    extendedexpinc_d3[5] <= extendedexpinc_d2[5];
  always @(posedge clk)
    extendedexpinc_d4[0] <= extendedexpinc_d3[0];
  always @(posedge clk)
    extendedexpinc_d4[1] <= extendedexpinc_d3[1];
  always @(posedge clk)
    extendedexpinc_d4[2] <= extendedexpinc_d3[2];
  always @(posedge clk)
    extendedexpinc_d4[3] <= extendedexpinc_d3[3];
  always @(posedge clk)
    extendedexpinc_d4[4] <= extendedexpinc_d3[4];
  always @(posedge clk)
    extendedexpinc_d4[5] <= extendedexpinc_d3[5];
  always @(posedge clk)
    extendedexpinc_d5[0] <= extendedexpinc_d4[0];
  always @(posedge clk)
    extendedexpinc_d5[1] <= extendedexpinc_d4[1];
  always @(posedge clk)
    extendedexpinc_d5[2] <= extendedexpinc_d4[2];
  always @(posedge clk)
    extendedexpinc_d5[3] <= extendedexpinc_d4[3];
  always @(posedge clk)
    extendedexpinc_d5[4] <= extendedexpinc_d4[4];
  always @(posedge clk)
    extendedexpinc_d5[5] <= extendedexpinc_d4[5];
  always @(posedge clk)
    extendedexpinc_d6[0] <= extendedexpinc_d5[0];
  always @(posedge clk)
    extendedexpinc_d6[1] <= extendedexpinc_d5[1];
  always @(posedge clk)
    extendedexpinc_d6[2] <= extendedexpinc_d5[2];
  always @(posedge clk)
    extendedexpinc_d6[3] <= extendedexpinc_d5[3];
  always @(posedge clk)
    extendedexpinc_d6[4] <= extendedexpinc_d5[4];
  always @(posedge clk)
    extendedexpinc_d6[5] <= extendedexpinc_d5[5];
  always @(posedge clk)
    eqdiffsign_d1 <= eqdiffsign;
  always @(posedge clk)
    eqdiffsign_d2 <= eqdiffsign_d1;
  always @(posedge clk)
    eqdiffsign_d3 <= eqdiffsign_d2;
  always @(posedge clk)
    fracr_d1[0] <= roundedexpfrac[1];
  always @(posedge clk)
    fracr_d1[1] <= roundedexpfrac[2];
  always @(posedge clk)
    fracr_d1[2] <= roundedexpfrac[3];
  always @(posedge clk)
    fracr_d1[3] <= roundedexpfrac[4];
  always @(posedge clk)
    fracr_d1[4] <= roundedexpfrac[5];
  always @(posedge clk)
    fracr_d1[5] <= roundedexpfrac[6];
  always @(posedge clk)
    fracr_d1[6] <= roundedexpfrac[7];
  always @(posedge clk)
    fracr_d1[7] <= roundedexpfrac[8];
  always @(posedge clk)
    fracr_d1[8] <= roundedexpfrac[9];
  always @(posedge clk)
    fracr_d1[9] <= roundedexpfrac[10];
  always @(posedge clk)
    expr_d1[0] <= roundedexpfrac[11];
  always @(posedge clk)
    expr_d1[1] <= roundedexpfrac[12];
  always @(posedge clk)
    expr_d1[2] <= roundedexpfrac[13];
  always @(posedge clk)
    expr_d1[3] <= roundedexpfrac[14];
  always @(posedge clk)
    expr_d1[4] <= roundedexpfrac[15];
  always @(posedge clk)
    excrt2_d1[0] <= excrt2[0];
  always @(posedge clk)
    excrt2_d1[1] <= excrt2[1];
  always @(posedge clk)
    if (_001_) signr_d1 <= 1'h0;
    else signr_d1 <= signx_d1;
  always @(posedge clk)
    signr2_d2 <= signr2_d1;
  always @(posedge clk)
    if (_000_) signr2_d1 <= 1'h0;
    else signr2_d1 <= signr_d6;
  intadder_14_freq500_uid6 fracadder (
    .cin(cinsigadd),
    .clk(clk),
    .r(\fracadder:232 ),
    .x({ 2'h1, newx[9:0], 2'h0 }),
    .y({ effsub_d1, fracypadxorop[12:0] })
  );
  normalizer_z_15_15_15_freq500_uid8 lzcandshifter (
    .clk(clk),
    .count(nzerosnew),
    .r({ \lzcandshifter:237 [14:3], shiftedfrac[2:0] }),
    .x({ \fracadder:232 , sticky_d1 })
  );
  rightshiftersticky11_by_max_13_freq500_uid4 rightshiftercomponent (
    .clk(clk),
    .r(\rightshiftercomponent:211 ),
    .s(shiftval),
    .sticky(sticky),
    .x(fracy)
  );
  intadder_18_freq500_uid11 roundingadder (
    .cin(needtoround),
    .clk(clk),
    .r(roundedexpfrac),
    .x({ updatedexp, \lzcandshifter:237 [13:3] }),
    .y(18'h00000)
  );
  assign \194.A  = 2'h3;
  assign \194.B  = 6'h24;
  assign { \194.B_AND_S [4:3], \194.B_AND_S [1:0] } = 4'h0;
  assign \194.B_OR[0].B_AND_BITS  = { 1'h0, \194.B_AND_S [2], 1'h0 };
  assign \194.B_OR[1].B_AND_BITS  = { \194.B_AND_S [5], 2'h0 };
  assign \194.S [2:1] = { \194.B_AND_S [5], \194.B_AND_S [2] };
  assign \194.Y  = excrt;
  assign \194.Y_B  = { \194.B_AND_S [5], \194.B_AND_S [2] };
  assign \320.A  = 2'h3;
  assign \320.B  = 6'h24;
  assign { \320.B_AND_S [4:3], \320.B_AND_S [1:0] } = 4'h0;
  assign \320.B_OR[0].B_AND_BITS  = { 1'h0, \320.B_AND_S [2], 1'h0 };
  assign \320.B_OR[1].B_AND_BITS  = { \320.B_AND_S [5], 2'h0 };
  assign \320.S [2:1] = { \320.B_AND_S [5], \320.B_AND_S [2] };
  assign \320.Y  = excrt2;
  assign \320.Y_B  = { \320.B_AND_S [5], \320.B_AND_S [2] };
  assign R[15:0] = { signr2_d2, expr_d1, fracr_d1 };
  assign computedr = { R[17:16], signr2_d2, expr_d1, fracr_d1 };
  assign effsubvector = { effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub, effsub };
  assign effsubvector_d1 = { effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1, effsub_d1 };
  assign excexpfracx = { X[17:16], X[14:0] };
  assign excexpfracy = { Y[17:16], Y[14:0] };
  assign excr = R[17:16];
  assign excx = newx[17:16];
  assign excy = newy[17:16];
  assign excy_d1 = sxsyexnxy_d1[1:0];
  assign exexpexc = { roundedexpfrac[17:16], excrt_d7 };
  assign expfrac = { updatedexp, \lzcandshifter:237 [13:3] };
  assign expr = roundedexpfrac[15:11];
  assign expx = newx[14:10];
  assign fracaddresult = \fracadder:232 ;
  assign fracr = roundedexpfrac[10:1];
  assign fracsticky = { \fracadder:232 , sticky_d1 };
  assign fracxpad = { newx[9:0], 2'h0 };
  assign fracypad = { 1'h0, \rightshiftercomponent:211  };
  assign fracypadxorop[13] = effsub_d1;
  assign lsb = \lzcandshifter:237 [4];
  assign \lzcandshifter:236  = nzerosnew;
  assign \lzcandshifter:237 [2:0] = shiftedfrac[2:0];
  assign newx[15] = signx;
  assign newy[15] = signy;
  assign \rightshiftercomponent:212  = sticky;
  assign rnd = \lzcandshifter:237 [3];
  assign \roundingadder:275  = roundedexpfrac;
  assign shiftedfrac[14:3] = \lzcandshifter:237 [14:3];
  assign shiftedfracy = \rightshiftercomponent:211 ;
  assign signy_d1 = sxsyexnxy_d1[4];
  assign sxsyexnxy = { signx, signy, newx[17:16], newy[17:16] };
  assign sxsyexnxy_d1[5] = signx_d1;
  assign upexc = roundedexpfrac[17:16];
endmodule
